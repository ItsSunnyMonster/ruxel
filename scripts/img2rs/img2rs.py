from PIL import Image
import argparse
import sys
from alive_progress import alive_bar
import os


def main():
    parser = argparse.ArgumentParser(
        description='Converts an image to a raw pixel data file and a rust file for access from a rust project.')
    parser.add_argument('image', help='The image to convert')
    parser.add_argument('-o', '--output', help='The output file name without an extension')
    parser.add_argument('-p', '--public', action='store_true', help='Make the generated rust constants public')
    args = parser.parse_args(sys.argv[1:])

    print(f"Opening {args.image}...")
    img = Image.open(args.image)
    print(f"Opened {img.format} image {args.image} in {img.mode}")
    print(f"Image size: {img.width}x{img.height}")
    print(f"Reading image...")
    rgba_data = list(img.getdata())
    rgba_list = []
    for i in range(len(rgba_data)):
        for j in rgba_data[i]:
            rgba_list.append(j)

    pub = "pub" if args.public else ""

    print(f"Writing to {args.output}.rs...")
    with open(f'{args.output}.rs', 'w') as f:
        f.write('// This file was generated by img2rs.py\n\n')
        f.write('#[allow(dead_code)]\n')
        f.write(f'{pub} const IMAGE_WIDTH: usize = {img.width};\n\n')
        f.write('#[allow(dead_code)]\n')
        f.write(f'{pub} const IMAGE_HEIGHT: usize = {img.height};\n\n')
        f.write('#[allow(dead_code)]\n')
        f.write(f'{pub} const IMAGE_MODE: &str = "{img.mode}";\n\n')
        f.write('#[allow(dead_code)]\n')
        f.write(
            f'{pub} const IMAGE_DATA: &[u8; {len(rgba_list)}] = include_bytes!("{os.path.basename(args.output)}.{img.mode.lower()}");\n')
    with alive_bar(len(rgba_list),
                   title=f"Writing to {args.output}.{img.mode.lower()}...",
                   scale="IEC",
                   unit="B") as bar:
        with open(f'{args.output}.{img.mode.lower()}', 'wb') as f:
            for i in rgba_list:
                f.write(i.to_bytes(1, byteorder='big'))
                bar()

    print("Done!")


if __name__ == '__main__':
    main()
